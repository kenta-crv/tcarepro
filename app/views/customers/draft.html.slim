- set_meta_tags noindex: true
.tops-wrapper
  h2.headline AI抽出

  .extraction-header
    .period-box
      - start_txt = (@period_start&.strftime("%Y/%m/%d")   || "__/__/__")
      - end_txt   = (@period_end&.strftime("%Y/%m/%d")   || "__/__/__")
      | #{start_txt} ～ #{end_txt}
    .remain-box
      - remain = (@remaining_extractable || "___")
      | 本日残り抽出可能数：#{remain}件

  / 表
  table.extraction-table[width="100%" cellpadding="0" cellspacing="0"]
    thead
      tr
        th 
        th インポート件数<br/>(AI抽出前)
        th 抽出成功数
        th 抽出失敗数
        th 抽出成功率
        th Status
        th 
        th
    tbody
      - @crowdworks.each do |crowdwork|
        - company       = crowdwork.title
        - import_count  = @industry_counts[crowdwork.title][:tel_without] - @industry_counts[crowdwork.title][:tel_with]
        - success_count =  @industry_counts[crowdwork.title][:success_count]
        - fail_count    =  @industry_counts[crowdwork.title][:failure_count]
        - rate_txt      =  "#{@industry_counts[crowdwork.title][:rate]}%"
        - status_txt    = @industry_counts[crowdwork.title][:status]
        - total_count = [import_count, @remaining_extractable].min

        tr
          td = company
          td
            = import_count
          td
            = success_count
          td
            = fail_count
          td = rate_txt
          td
            = status_txt

          td.action-cell
            / ルーティング未用意でも壊れないように # をデフォルトに
            .square_btn
              = link_to "AI抽出開始", extract_company_info_path(industry_name: crowdwork.title, total_count: total_count), method: "post", class: "btn btn-ai"
          td.action-cell  
            .square_btn
              = link_to "チェック開始", filter_by_industry_path(industry_name: crowdwork.title), method: :get, class: "btn btn-default"


.tops-wrapper
  h2.headline
    | ドラフトリスト
.tops-wrapper
  - if @crowdworks.present?
    - @crowdworks.each do |crowdwork|
      = link_to crowdwork.title, filter_by_industry_path(industry_name: crowdwork.title), method: :get, class: "btn btn-default"
      | (
      = @industry_counts[crowdwork.title][:tel_with]
      | /
      = @industry_counts[crowdwork.title][:tel_without]
      | )

= form_tag({ controller: :customers, action: :bulk_action }, method: :post) do
  -if admin_signed_in?
   .scroll
    = select_tag :status, options_for_select([['公開', nil], ['非表示', 'hidden']]), prompt: 'Select Status'
    = submit_tag '一括更新', name: 'commit', style: 'width: 80px;margin: 0 0 10px 5%;font-size: 11px;'
    = submit_tag '一括削除', name: 'commit', style: 'width: 80px;margin: 0 0 10px 5%;font-size: 11px;', data: { confirm: '本当に削除しますか？' }
    = submit_tag '一括削除（社名）', name: 'commit', style: 'width: 80px;margin: 0 0 10px 5%;font-size: 11px;', data: { confirm: '本当に削除しますか？' }

  table[width="100%" cellpadding="0" cellspacing="0"]
     col[width="3%"]
     col[width="25%"]
     col[width="8%"]
     col[width="13%"]
     col[width="5%"]
     col[width="7%"]
     col[width="10%"]
     col[width="10%"]
     col[width="5%"]
     col[width="10%"]
     thead
       tr
         th
           input.checkable_delete_all[type="checkbox", id="select_all"]
         th
           | 会社名
         th
           = link_to 'tel_within', filter_by_industry_path(industry_name: params[:industry_name], tel_filter: 'with_tel')
           br/
           = link_to 'tel_without', filter_by_industry_path(industry_name: params[:industry_name], tel_filter: 'without_tel')
         th
           | 住所
         th
           | 業種
         th
           | 職種
         th
           | URL 
         th
           | フォームURL
         th
           | 担当者
         th
           | 作成日
     - @customers.each do |customer|
       tr
         td
           = check_box_tag "deletes[#{customer.id}]", customer.id
         td
           = link_to customer&.company, edit_customer_path(customer, industry_name: params[:industry_name]), class: 'command'
         td
           = customer&.tel
         td
           = truncate(customer&.address, length: 15)
         td
           = customer&.business
         td
           = truncate(customer&.genre, length: 15)
         td
           = truncate(customer&.url, length: 15)
         td
           = truncate(customer&.contact_url, length: 15)
         td
           = customer.worker&.user_name
         td
           = customer&.created_at.strftime("%m月%d日 %H時%M分")
     tr
       th[colspan="10"]
         = paginate @customers

 

javascript:
  $(function() {
    var allChecableBox = $('.checkable_delete_all');
    var deleteCheckBoxs = $("[id^='deletes_']");

    allChecableBox.change(function() {
      if (this.checked) {
        deleteCheckBoxs.prop('checked', true);
      } else {
        deleteCheckBoxs.prop('checked', false);
      }
    });

    deleteCheckBoxs.change(function() {
      var unCheckedExist = $("input:not(:checked)[id^='deletes_']").length > 0;
      var checkedExist = $("input:checked[id^='deletes_']").length > 0;

      if (checkedExist && unCheckedExist) {
        allChecableBox.prop('indeterminate', true);
      } else {
        allChecableBox.prop('indeterminate', false);
        allChecableBox.prop('checked', checkedExist);
      }
    });

    var extract_button = $('.extract_button');
    extract_button.click(function(e) {
      e.preventDefault(); // 通常のリンク遷移を止める
      const url = this.dataset.url;
      const max = parseInt(this.dataset.max, 10) || 0;
      if (max === 0) {
        alert(`本日の抽出上限に達しています。`);
        return;
      }
      const company = this.dataset.company;
      const input = window.prompt(
        `AI抽出を開始します。\n対象: ${company}\n抽出件数を入力（1〜${max}）`,
        max
      );

      // キャンセル時
      if (input === null) return;

      const count = parseInt(input.trim(), 10);
      if (!count || count < 1 || count > max) {
        alert(`1〜${max} の数値を入力してください`);
        return;
      }

      const $form = $(this).closest('form.extract-form');
      if ($form.length === 0) {
        console.error('対応する form が見つかりません');
        return;
      }

      const $countField = $form.find('input[name="count"]');
      $countField.val(count);

      // 件数をクエリに追加して遷移
      const formEl = $form.get(0);
      if (formEl.requestSubmit) {
        formEl.requestSubmit();
      } else {
        // 古いブラウザ向けフォールバック
        $form.trigger('submit');
      }
    });

    // 進捗ポーリング（1リクエストでまとめて取得）
    function pollProgress() {
      // ポーリング対象（基本は「抽出中」の行のみ）
      var $rows = $("tr.data-row");
      var industries = [];
      $rows.each(function(){
        var $row = $(this);
        var industry = $row.data('industry');
        if (!industry) { return; }
        var statusText = ($row.find('.js-status').text() || '').trim();
        // 抽出中のみを優先的にポーリング。全くなければ全行を対象（初回など）
        if (statusText.indexOf('抽出中') !== -1) {
          industries.push(industry);
        }
      });

      if (industries.length === 0) {
        // "抽出中" が無ければ全行を対象（過負荷を避けるために一括で1回のみ）
        industries = $rows.map(function(){ return $(this).data('industry'); }).get().filter(Boolean);
      }

      if (industries.length === 0) { return; }

      $.getJSON('/draft/progress', { industries: industries })
        .done(function(resp) {
          if (!resp) { return; }
          industries.forEach(function(industry){
            var data = resp[industry];
            if (!data) { return; }
            var $row = $('tr.data-row[data-industry="' + industry + '"]');
            var $status = $row.find('.js-status');
            // ベースのステータス文字列のみ置換
            $status.contents().filter(function(){ return this.nodeType === 3; }).remove();
            $status.prepend(data.status);
            $row.find('.js-success').text(data.success);
            $row.find('.js-failure').text(data.failure);
            var totalTried = (data.success || 0) + (data.failure || 0);
            var rate = totalTried > 0 ? (data.success / totalTried * 100) : 0;
            $row.find('.js-rate').text(rate.toFixed(1) + '%');
            $row.find('.js-progress-sub').text('(' + totalTried + '/' + data.total + ')');
          });
        })
        .fail(function(){ /* noop */ });
    }

    // 周期的にポーリング
    setInterval(pollProgress, #{refresh_interval});
    // 初回即時実行
    pollProgress();
  });
