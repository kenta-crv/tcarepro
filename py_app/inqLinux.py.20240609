
from typing import List, Tuple, Dict, Set, Union,Optional
from curses import noecho
from webdriver_manager.chrome import ChromeDriverManager

from logging import ERROR
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from bs4.element import  Tag
import bs4
import bs4.element
import time
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.remote.webelement import WebElement
from selenium.common.exceptions import NoSuchElementException    
from selenium.common.exceptions import  StaleElementReferenceException
from selenium.common.exceptions import ElementNotInteractableException

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By

import time
import datetime
import sys
import os
import subJCommon as com
import shutil
# Chrome WebDriverのパスを指定
webdriver_path = "/usr/lib/python3.6/site-packages/chromedriver"

# Chromeの実行可能ファイルのパスを指定
chrome_binary_path = "/usr/bin/google-chrome"

# ChromeOptionsを作成
chrome_options = webdriver.ChromeOptions()

chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument("--user-data-dir=/tmp/temp_chrome_profile")

# Chromeのバイナリパスを指定
chrome_options.binary_location = chrome_binary_path

# ヘッドレスモードを有効にする場合
# chrome_options.add_argument("--headless")

# Chrome WebDriverを起動
driver = webdriver.Chrome(executable_path=webdriver_path, options=chrome_options)
DEBUGMODE=False
inqMd = os.environ.get('INQUIRY_MODE')
if inqMd and (inqMd.startswith('D') or inqMd.startswith('d')):
    DEBUGMODE=True
    try:
        source_file="/opt/webroot/tcarepro/log/okurite/debug.log"
        destination_file="/opt/webroot/tcarepro/log/okurite/debug01.log"
        shutil.copyfile(source_file, destination_file)
        os.remove(source_file)
    except:
        pass
else:
    DEBUGMODE=False



import pandas as pd
okFile = '/opt/webroot/tcarepro/tmp/exported_data.csv'

#url = "https://ri-plus.jp/"
#driver.get(url)

# データを取得するためのSeleniumコードを追加
# 例: タイトルを取得する
#title = driver.title
#print("ページタイトル:", title)
import json


base = "http://127.0.0.1:5000"
url = base  + "/api/v1/contact"


to_url = "https://ri-plus.jp/"
to_company = "Ri-Plus"
to_tel = "0662058008"

json_data = {
		"from_company": "会社名",
		"person": "担当者名",
		"person_kana": "タントウシャ",
		"post": "6888890",
		"address": "大阪府大阪市中央",
		"age": 25,
		"title": "問い合わせ",
		"from_url": "https://www.hirayama-g.com/",
		"from_tel": "09000909909",
		"from_mail": "hirayama@gmail.com",
		"content": "問い合わせ内容",
		"to_company": to_company ,
		"to_url": to_url,
		"to_tel": to_company,
		"to_mail": "hirayama-2@gmail.com"
}

get_xpath = """
function getElementXPath(element) {
    if (!element || !element.tagName)
        return null;

    if (element.id)
        return '//' + element.tagName.toLowerCase() + '[@id="' + element.id + '"]';

    var nodeIndex = 0;
    var siblings = element.parentNode.childNodes;
    for (var i = 0; i < siblings.length; i++) {
        var sibling = siblings[i];
        if (sibling.nodeType === Node.ELEMENT_NODE) {
            if (sibling === element) {
                return getElementXPath(element.parentNode) + '/' + element.tagName.toLowerCase() + '[' + (nodeIndex + 1) + ']';
            }
            if (sibling.tagName === element.tagName) {
                nodeIndex++;
            }
        }
    }
    return null;
}
return getElementXPath(arguments[0]);
"""


from typing import List, Optional, Tuple,Dict
form_elems:Dict[str,Optional[WebElement]] =  {
    'from_company': None,
    'kana':None,
    'post':None,
    'address':None,
    'from_url':None,
    'age':None,
    'title':None,
    'person': None,
    'from_tel': None,
    'from_mail': None,
    'content': None,
    'submit': None
}


form_attr_list:Dict[str,Dict[str,List[str]]] =  {
    'content':      {
                        "input_name_list": ["body" , "inquiry" , "content" , "contents" , "text" , "message","問い合わせ"],
                        "table_label_list":["問い合わせ"  ,"問合わせ" ,"問合せ" ,"相談内容", "ご質問", "ご用件", "コメント","本文"  , "要望", "内容", "その他" , "メッセージ"]
                    },
    'from_company': {
                        "input_name_list":["company"],
                        "table_label_list":["会社名","企業","団体"]
                    },
    'from_mail':   {
                        "input_name_list": ["email" , "e-mail", "mail" ],
                        "table_label_list":["メールアドレス","メール" ]
                    },    
    'person_kana': {
                        "input_name_list":["kana"],
                        "table_label_list":["ふりがな","フリガナ" ,"かな" , "カナ", "せい", "めい", "セイ", "メイ"]
                    },
    'address': {
                        "input_name_list":["address", "prefecture"],
                        "table_label_list":["都道府県" , "住所"]
                    },
    'title': {
                        "input_name_list":["title","head","headline"],
                        "table_label_list":["件名"]
                    },
    'from_url': {
                        "input_name_list":["url" , "hp"],
                        "table_label_list":["ホームページURL"]
                    },
    'person':       {
                        "input_name_list": ["name","manager","person","president"],
                        "table_label_list":["担当者","お名前","名前","性","名"]
                    },
    'from_tel':     {
                        "input_name_list": ["phone" , "tel" , "mobile"],
                        "table_label_list":["電話番号" , "携帯番号"]
                    },
    'age': {
                        "input_name_list":["age"],
                        "table_label_list":["年齢"]
                    },
    'post': {
                        "input_name_list":["post"],
                        "table_label_list":["郵便番号" , "〒"]
                    },
    'submit':       {
                        "submit_type_list": ["submit"]
                    },
}

parsed_data = json.dumps(json_data)
data = json.loads(parsed_data)

def setControlData(selectedForm):
    for tag_name in ['input', 'textarea']:
        elements = selectedForm.find_elements(By.TAG_NAME, tag_name)
        for element in elements:
            if  element.get_attribute('type')!='hidden':
                continue
            elif element.get_attribute('type')=='checkbox':
                outer_html = element.get_attribute('outerHTML')
                if not element.is_selected():
                    element.click()                        
            elif not element.get_attribute('value') and  element.get_attribute('type')!='hidden':
                for key, value in form_attr_list.items():
                    if key != "submit":
                        for i in value["table_label_list"]:
                            labels = driver.find_elements(By.XPATH, "//label[following::input[@name='"+element.get_attribute('name')+"']]")
                            if len(labels)==0: 
                                labels = driver.find_elements(By.XPATH, "//label[following::input[@id='"+element.get_attribute('id')+"']]")
                            debugWrite("//label[following::input[@id='"+element.get_attribute('id')+"']]")
                            if len(labels) > 0:
                                closest_label = labels[-1]
                                closest_label.text.strip()
                                if closest_label.text.strip().find(i) > -1 :
                                    #print(i,closest_label.text.strip(),key,data[key],xpath)
                                    try:
                                        element.send_keys(data[key])
                                    except:
                                        pass
                                    break
     
  

def setControlDataByLabel(form):
    global data
    for key, value in form_attr_list.items():
        if key != "submit":
            for i in value["table_label_list"]:
                #xpathtxt=".//*[contains(text(), '" + i + "') ]"
                xpathtxt = './/*[contains(text(), "' + i + '") and not(self::input or self::textarea)]'
                debugWrite(xpathtxt)
                try:
                    labelElements = form.find_elements(By.XPATH, xpathtxt)
                    labelElement=min(labelElements, key=lambda x: x.get_attribute("innerHTML"))
                    input_element=labelElement.find_element(By.XPATH,".//following::*[(self::input[not(@type='hidden')] or self::textarea)][1]")
                    if input_element.get_attribute('value') == "":
                        input_element.clear()
                        input_element.send_keys(data[key])
                except:
                   pass            


def setControlDataByPlaceholder(form):
    global data
    for key, value in form_attr_list.items():
        if key != "submit":
            for i in value["table_label_list"]:
                xpathtxt='.//input[contains(@placeholder, "' + i + '")] | .//textarea[contains(@placeholder, "' + i + '") and not(@type="hidden")]'
                debugWrite(xpathtxt)
                try:
                    input_element = form.find_element(By.XPATH, xpathtxt)
                    if input_element.get_attribute('value') == "":
                        input_element.clear()
                        input_element.send_keys(data[key])
                except:
                    pass

def getAskForm():
    global driver
    selectedForm=None
    forms = driver.find_elements(By.TAG_NAME, 'form')
    # 条件に合致するフォームを格納するリスト
    matching_forms = []
    
    # 各フォームをループしてチェック
    for form in forms:
        outer_html = form.get_attribute('outerHTML')
        # 「名前」と「問い合わせ」の文字が含まれているかをチェック
        if ('名前' in outer_html or '氏名' in outer_html)and ('問い合わせ' in outer_html or '問合せ' in outer_html  or 'ご質問' in outer_html or 'ご用件' in outer_html or "コメント" in outer_html or "問合わせ"  in outer_html )  :
            matching_forms.append(form)
            selectedForm=form
            break
        elif ('問い合わせ' in outer_html or '問合せ' in outer_html  or 'ご質問' in outer_html or 'ご用件' in outer_html or "コメント" in outer_html  or "問合わせ"  in outer_html )   :     
            matching_forms.append(form)
            selectedForm=form
            break
    return selectedForm
def checkHPHyper(keyword):
    aH=''
    global driver
    for i in driver.find_elements(By.XPATH, '//*[@id="rso"]/div[*]/div/div/div[1]/div/div/span/a'):
        aH = i.get_attribute('href')
        outH = i.get_attribute('outerHTML')
        inH = i.get_attribute('innerHTML')
        if inH.find(keyword) > -1:
            break
    return aH

def companyInfoGoogle(comName):
    flg=-1
    rt=''
    global driver
    cmpHP=''
    com.driver=driver
    com.googleSearch(comName + '　問い合わせ', 'CompanyName', 'HP','onlySearch')
    for i in driver.find_elements(By.TAG_NAME,'a'):
        inHTML = i.get_attribute('innerHTML')
        inURL = i.get_attribute('href')
        if comName.find('http') > -1: cmpHP = comName[comName.find('http'):]
        if inHTML.find('問い合わせ') > -1 and inURL.find(cmpHP) > -1:
            #i.click()
            if  i.get_attribute('href').find('pdf') == -1 :
                rt=i.get_attribute('href')
                flg=1
                break;
        elif inHTML.find('問合わせ') > -1 and inURL.find(cmpHP) > -1:
            #i.click();
            if  i.get_attribute('href').find('pdf') == -1 :
                rt=i.get_attribute('href')
                flg=1
                break;
        elif inHTML.upper().find('CONTACT') > -1 and inURL.find(cmpHP) > -1:
            #i.click();
            if  i.get_attribute('href').find('pdf') == -1 :
                rt=i.get_attribute('href')
                flg=1
                break;
        #if exhibitURLCheck(rt) == '': rt=''
    if len(rt) < 2:
        com.googleSearch(comName + '　問い合わせ', 'CompanyName', 'HP', 'onlySearch')
        rt = checkHPHyper('問い合わせ')
        if len(rt) < 2:
            if ci.get_attribute('href').find('pdf') > -1 :
                rt=''
    return rt

def getTemplate(tNo):
    global data
    import json
    file_path = "/opt/webroot/tcarepro/tmp/template_"+tNo+".json"
    # JSONファイルを読み込む
    with open(file_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
def logWrite(logstr):
    now = datetime.datetime.now() # 日本時刻
    ym =  now.strftime('%Y%m')     
    ymd = now.strftime('%Y%m%d')  
    d = now.strftime('%Y%m%d %H%M%S')
    filename = "/opt/webroot/tcarepro/log/okurite/okurite.log"
    with open(filename, 'a', errors="ignore") as log_file:
        log_file.write( d+ " " + logstr +"\n" )    
    debugWrite(logstr)
def debugWrite(logstr):
    global DEBUGMODE
    if DEBUGMODE==True:
        now = datetime.datetime.now() # 日本時刻
        ym =  now.strftime('%Y%m')     
        ymd = now.strftime('%Y%m%d')  
        d = now.strftime('%Y%m%d %H%M%S')
        filename = "/opt/webroot/tcarepro/log/okurite/debug.log"
        with open(filename, 'a', errors="ignore") as log_file:
            log_file.write( d+ " " + logstr +"\n" )    


start_time = time.time()
time_limit = 28800  # 8 hours in seconds
df = pd.read_csv(okFile)
for key, item in df.iterrows():
    if time.time() - start_time > time_limit:
        logWrite( sourceUrl+ " 8時間タイムアウト")
        break    
    sourceUrl=""
    if  com.exhibitURLCheck(pd.notna(item['contact_url'])):
        sourceUrl=item['contact_url']
    else:
        if  pd.notna(item['URL1']):
            try:
                sourceUrl=companyInfoGoogle(item["companyname"])
            except:
                sourceUrl=""
    logWrite( sourceUrl+ " 送信開始")
    if sourceUrl!="":
        try:
            driver.get(sourceUrl)
            com.driver=driver
            getTemplate(str(item['inquiry_id']))
            selectedForm = getAskForm()
            setControlDataByPlaceholder(selectedForm)
            setControlDataByLabel(selectedForm)
            setControlData(selectedForm)
            #selectedForm.submit()
            time.sleep(1)
            try:
                driver.switch_to.alert.accept()
            except:
                print('no alert')
                pass            
            #os.system('rails update_contact_status:update['+str(item["track_id"])+'] 1')
            logWrite( sourceUrl+ " 送信成功")
        except:
            #os.system('rails update_contact_status:update['+str(item["track_id"])+'] 2')
            logWrite( sourceUrl+ " 送信失敗（001）")
    else:
        #os.system('rails update_contact_status:update['+str(item["track_id"])+'] 2')
        logWrite( sourceUrl+ " 送信失敗（002）")


