
from typing import List, Tuple, Dict, Set, Union,Optional
from curses import noecho
from webdriver_manager.chrome import ChromeDriverManager

from logging import ERROR
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from bs4.element import  Tag
import bs4
import bs4.element
import time
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.remote.webelement import WebElement
from selenium.common.exceptions import NoSuchElementException    
from selenium.common.exceptions import  StaleElementReferenceException
from selenium.common.exceptions import ElementNotInteractableException

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By

import time
import datetime
import sys
import os
sys.path.append('/home/smart/webroot/tcarepro/py_app')
import subJCommon as com
import shutil
# Chrome WebDriverのパスを指定
#webdriver_path = "/usr/lib/python3.6/site-packages/chromedriver"
#webdriver_path = "/home/smart/chromedriver-linux64/chromedriver"
webdriver_path = "/home/smart/work/chromedriver103/chromedriver"
# Chromeの実行可能ファイルのパスを指定
chrome_binary_path = "/usr/bin/google-chrome"

# ChromeOptionsを作成
chrome_options = webdriver.ChromeOptions()

chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument("--user-data-dir=/tmp/temp_chrome_profile")

# Chromeのバイナリパスを指定
chrome_options.binary_location = chrome_binary_path

# ヘッドレスモードを有効にする場合
# chrome_options.add_argument("--headless")

# Chrome WebDriverを起動
#driver = webdriver.Chrome(executable_path=webdriver_path, options=chrome_options)
service = Service(webdriver_path)
driver = webdriver.Chrome(service=service, options=chrome_options)
DEBUGMODE=False
inqMd = os.environ.get('INQUIRY_MODE')
if inqMd and (inqMd.startswith('D') or inqMd.startswith('d')):
    DEBUGMODE=True
    try:
        source_file="/opt/webroot/tcarepro/log/okurite/debug.log"
        destination_file="/opt/webroot/tcarepro/log/okurite/debug01.log"
        shutil.copyfile(source_file, destination_file)
        os.remove(source_file)
    except:
        pass
else:
    DEBUGMODE=False

import pandas as pd
okFile = '/opt/webroot/tcarepro/tmp/exported_data.csv'

#url = "https://ri-plus.jp/"
#driver.get(url)

# データを取得するためのSeleniumコードを追加
# 例: タイトルを取得する
#title = driver.title
#print("ページタイトル:", title)
import json


base = "http://127.0.0.1:5000"
url = base  + "/api/v1/contact"


to_url = "https://ri-plus.jp/"
to_company = "Ri-Plus"
to_tel = "0662058008"

json_data = {
		"from_company": "会社名",
		"person": "担当者名",
		"person_kana": "タントウシャ",
		"post": "6888890",
		"address": "大阪府大阪市中央",
		"age": 25,
		"title": "問い合わせ",
		"from_url": "https://www.hirayama-g.com/",
		"from_tel": "09000909909",
		"from_mail": "hirayama@gmail.com",
		"content": "問い合わせ内容",
		"to_company": to_company ,
		"to_url": to_url,
		"to_tel": to_company,
		"to_mail": "hirayama-2@gmail.com"
}

get_xpath = """
function getElementXPath(element) {
    if (!element || !element.tagName)
        return null;

    if (element.id)
        return '//' + element.tagName.toLowerCase() + '[@id="' + element.id + '"]';

    var nodeIndex = 0;
    var siblings = element.parentNode.childNodes;
    for (var i = 0; i < siblings.length; i++) {
        var sibling = siblings[i];
        if (sibling.nodeType === Node.ELEMENT_NODE) {
            if (sibling === element) {
                return getElementXPath(element.parentNode) + '/' + element.tagName.toLowerCase() + '[' + (nodeIndex + 1) + ']';
            }
            if (sibling.tagName === element.tagName) {
                nodeIndex++;
            }
        }
    }
    return null;
}
return getElementXPath(arguments[0]);
"""


from typing import List, Optional, Tuple,Dict
form_elems:Dict[str,Optional[WebElement]] =  {
    'from_company': None,
    'kana':None,
    'post':None,
    'address':None,
    'from_url':None,
    'age':None,
    'title':None,
    'person': None,
    'from_tel': None,
    'from_mail': None,
    'content': None,
    'submit': None
}


form_attr_list:Dict[str,Dict[str,List[str]]] =  {
    'content':      {
                        "input_name_list": ["body" , "inquiry" , "content" , "contents" , "text" , "message","問い合わせ"],
                        "table_label_list":["問い合わせ"  ,"問合わせ" ,"問合せ" ,"相談内容", "ご質問", "ご用件", "コメント","本文"  , "要望", "内容", "その他" , "メッセージ"]
                    },
    'from_company': {
                        "input_name_list":["company"],
                        "table_label_list":["会社名","企業","団体"]
                    },
    'from_mail':   {
                        "input_name_list": ["email" , "e-mail", "mail" ],
                        "table_label_list":["メールアドレス","メール" ]
                    },    
    'person_kana': {
                        "input_name_list":["kana","hurigana"],
                        "table_label_list":["ふりがな","フリガナ" ,"かな" , "カナ", "せい", "めい", "セイ", "メイ"]
                    },
    'address': {
                        "input_name_list":["address", "prefecture"],
                        "table_label_list":["都道府県" , "住所"]
                    },
    'title': {
                        "input_name_list":["title","head","headline"],
                        "table_label_list":["件名"]
                    },
    'from_url': {
                        "input_name_list":["url" , "hp"],
                        "table_label_list":["ホームページURL"]
                    },
    'person':       {
                        "input_name_list": ["name","manager","person","president"],
                        "table_label_list":["担当者","お名前","名前","性","名"]
                    },
    'from_tel':     {
                        "input_name_list": ["phone" , "tel" , "mobile"],
                        "table_label_list":["電話番号" , "携帯番号"]
                    },
    'age': {
                        "input_name_list":["age"],
                        "table_label_list":["年齢"]
                    },
    'post': {
                        "input_name_list":["post"],
                        "table_label_list":["郵便番号" , "〒"]
                    },
    'submit':       {
                        "submit_type_list": ["submit"]
                    },
}

parsed_data = json.dumps(json_data)
data = json.loads(parsed_data)




def nullValueCount(selectedForm):
    nullvalueCnt=0
    elements = selectedForm.find_elements(By.XPATH, '//input[not(@type="hidden") and not(@type="button") and not(@type="search")] | //textarea')
    #filtered_elements = [el for el in elements if not el.get_attribute('value') and not el.get_attribute('innerHTML')]
    filtered_elements = [
        el for el in elements
        if not el.get_attribute('value') and not el.get_attribute('innerHTML') and el.is_displayed()
    ]    
    
    for el in filtered_elements:
        print(el.get_attribute('outerHTML'))
        nullvalueCnt+=1
    return nullvalueCnt



def setControlData(selectedForm):
    tcnt = nullValueCount(selectedForm)
    if tcnt == 0 : return
    pcnt = 0    
    select_elements = selectedForm.find_elements(By.TAG_NAME, "select")
    if len(select_elements) > 0:
        for select_element in select_elements:
            select = Select(select_element)
            select.select_by_index(1)  # 一番目の<option>を選択    
            
    for tag_name in ['input', 'textarea']:
        try:
            elements = selectedForm.find_elements(By.TAG_NAME, tag_name)
        except:
            continue
        
        for element in elements:
            if  element.get_attribute('type')=='hidden':
                continue
            elif element.get_attribute('type')=='checkbox':
                outer_html = element.get_attribute('outerHTML')
                if not element.is_selected():
                    try:
                        element.click()  
                    except :
                        driver.execute_script("arguments[0].click();", element)          
            elif element.get_attribute('type')=='radio':
                outer_html = element.get_attribute('outerHTML')
                if not element.is_selected():
                    driver.execute_script("arguments[0].click();", element)                              
            elif len(element.get_attribute('value')) < 1 and  element.get_attribute('type')!='hidden':
                emptyFlg=True 
                if tcnt <= pcnt : break
                for key, value in form_attr_list.items():
                    labels=None
                    if key != "submit":
                        for i in value["input_name_list"]:
                            if element.get_attribute('name') !=None and len(element.get_attribute('name')) > 0 and  i in element.get_attribute('name'):
                                labels=element
                            if not labels:
                                if element.get_attribute('id') !=None and len(element.get_attribute('id')) > 0 and i in element.get_attribute('id'):
                                    labels=element
                            if  labels :
                                if len(labels.get_attribute('value') ) < 1 :
                                    print(i, element.get_attribute('id'), element.get_attribute('name'),  labels.get_attribute('value')   )
                                    #print(labels.get_attribute('outerHTML'))
                                    labels.clear()
                                    labels.send_keys(data[key])
                                    pcnt=pcnt+1
                                    break
                if len(element.get_attribute('name')) > 0 and emptyFlg==True:
                    if element.get_attribute('name').find("post") > -1 or element.get_attribute('name').find("番") > -1:
                        element.clear()
                        element.send_keys("000")
                    else:
                        element.clear()
                        element.send_keys("　")     
  

def setControlDataByLabel(form):
    global data
    tcnt = nullValueCount(selectedForm)
    if tcnt == 0 : return
    pcnt = 0
    for key, value in form_attr_list.items():
        if tcnt <= pcnt : break        
        if key != "submit":
            for i in value["table_label_list"]:
                #xpathtxt=".//*[contains(text(), '" + i + "') ]"
                xpathtxt = './/*[contains(text(), "' + i + '") and not(self::input or self::textarea)]'
                debugWrite(xpathtxt)
                try:
                    labelElements = selectedForm.find_elements(By.XPATH, xpathtxt)
                    if len(labelElements) > 0:
                        labelElement=min(labelElements, key=lambda x: len(com.removeTagInfo(x.get_attribute("outerHTML"))))
                        debugWrite(labelElement.get_attribute('innerHTML'))
                        debugWrite('following::input[not(@type="hidden")][1] | following::textarea[not(@type="hidden")][1]')
                        #input_element=labelElement.find_element(By.XPATH,".//following::*[(self::input[not(@type='hidden')] or self::textarea)][1]")
                        if key!="content":
                            input_element=labelElement.find_element(By.XPATH,'following::input[not(@type="hidden")][1] | following::textarea[not(@type="hidden")][1]')
                        else:
                            input_element=labelElement.find_element(By.XPATH,'following::textarea[not(@type="hidden")][1]')
                        if input_element.get_attribute('value') == "" and  key in data:
                            debugWrite(input_element.get_attribute('outerHTML'))
                            input_element.clear()
                            input_element.send_keys(data[key])    
                            endFlg=True
                            pcnt = pcnt + 1                            
                            break
                except NoSuchElementException:
                    pass       
                except StaleElementReferenceException:
                    pass
                except:
                    pass                


def setControlDataByPlaceholder(form):
    global data
    placeholderStr=[]
    for j in selectedForm.find_elements(By.XPATH, '//input[@placeholder] | //textarea[@placeholder]'):
        placeholderStr.append(j.get_attribute('placeholder'))
    if len(placeholderStr) > 0:
        for key, value in form_attr_list.items():
            if key != "submit":
                for i in value["table_label_list"]:
                    xpathtxt='.//input[contains(@placeholder, "' + i + '")] | .//textarea[contains(@placeholder, "' + i + '") and not(@type="hidden")]'
                    result = [s for s in placeholderStr if i in s]
                    if len(result) > 0 :
                        debugWrite(result[0] + " " + i)
                        try:
                            j = form.find_element(By.XPATH, xpathtxt)
                            #print(j.get_attribute('outerHTML'))
                            if j.get_attribute('value') == "":
                                j.clear()
                                j.send_keys(data[key])
                                loopFlg=False            
                                break
                        except NoSuchElementException:
                            pass



def getAskForm():
    global driver
    selectedForm=None
    forms = driver.find_elements(By.TAG_NAME, 'form')
    # 条件に合致するフォームを格納するリスト
    matching_forms = []
    
    # 各フォームをループしてチェック
    for form in forms:
        outer_html = form.get_attribute('outerHTML')
        # 「名前」と「問い合わせ」の文字が含まれているかをチェック
        if ('名前' in outer_html or '氏名' in outer_html)and ('問い合わせ' in outer_html or '問合せ' in outer_html  or 'ご質問' in outer_html or 'ご用件' in outer_html or "コメント" in outer_html or "問合わせ"  in outer_html or 'ご依頼内容' in outer_html or "メッセージ" in outer_html )  :
            matching_forms.append(form)
            selectedForm=form
            break
        elif ('問い合わせ' in outer_html or '問合せ' in outer_html  or 'ご質問' in outer_html or 'ご用件' in outer_html or "コメント" in outer_html  or "問合わせ"  in outer_html or 'ご依頼内容' in outer_html or "メッセージ" in outer_html )   :        
            matching_forms.append(form)
            selectedForm=form
            break
    return selectedForm
def checkHPHyper(keyword):
    aH=''
    global driver
    for i in driver.find_elements(By.XPATH, '//*[@id="rso"]/div[*]/div/div/div[1]/div/div/span/a'):
        aH = i.get_attribute('href')
        outH = i.get_attribute('outerHTML')
        inH = i.get_attribute('innerHTML')
        if inH.find(keyword) > -1:
            break
    return aH

def companyInfoGoogle(comName):
    flg=-1
    rt=''
    global driver
    cmpHP=''
    com.driver=driver
    com.googleSearch(comName + '　問い合わせ', 'CompanyName', 'HP','onlySearch')
    for i in driver.find_elements(By.TAG_NAME,'a'):
        inHTML = i.get_attribute('innerHTML')
        inURL = i.get_attribute('href')
        if comName.find('http') > -1: cmpHP = comName[comName.find('http'):]
        if inHTML.find('問い合わせ') > -1 and inURL.find(cmpHP) > -1:
            #i.click()
            if  i.get_attribute('href').find('pdf') == -1 :
                rt=i.get_attribute('href')
                flg=1
                break;
        elif inHTML.find('問合わせ') > -1 and inURL.find(cmpHP) > -1:
            #i.click();
            if  i.get_attribute('href').find('pdf') == -1 :
                rt=i.get_attribute('href')
                flg=1
                break;
        elif inHTML.upper().find('CONTACT') > -1 and inURL.find(cmpHP) > -1:
            #i.click();
            if  i.get_attribute('href').find('pdf') == -1 :
                rt=i.get_attribute('href')
                flg=1
                break;
        #if exhibitURLCheck(rt) == '': rt=''
    if len(rt) < 2:
        com.googleSearch(comName + '　問い合わせ', 'CompanyName', 'HP', 'onlySearch')
        rt = checkHPHyper('問い合わせ')
        if len(rt) < 2:
            if ci.get_attribute('href').find('pdf') > -1 :
                rt=''
    return rt

def getTemplate(tNo):
    global data
    import json
    file_path = "/opt/webroot/tcarepro/tmp/template_"+tNo+".json"
    # JSONファイルを読み込む
    with open(file_path, 'r', encoding='utf-8') as file:
        data = json.load(file)
def logWrite(logstr):
    now = datetime.datetime.now() # 日本時刻
    ym =  now.strftime('%Y%m')     
    ymd = now.strftime('%Y%m%d')  
    d = now.strftime('%Y%m%d %H%M%S')
    filename = "/opt/webroot/tcarepro/log/okurite/okurite.log"
    with open(filename, 'a', errors="ignore") as log_file:
        log_file.write( d+ " " + logstr +"\n" )    
    debugWrite(logstr)
def debugWrite(logstr):
    global DEBUGMODE
    if DEBUGMODE==True:
        now = datetime.datetime.now() # 日本時刻
        ym =  now.strftime('%Y%m')     
        ymd = now.strftime('%Y%m%d')  
        d = now.strftime('%Y%m%d %H%M%S')
        filename = "/opt/webroot/tcarepro/log/okurite/debug.log"
        with open(filename, 'a', errors="ignore") as log_file:
            log_file.write( d+ " " + logstr +"\n" )    


def exhibitURLCheck(url):
    rt=url
    if rt==None:return ''
    if not isinstance(url, str):return ''
    exhibitList = ['facebook.com','townwork.net','jbplt.jp','tsukulink.net','recyclehub.jp','https://xn','reform-master.net','doda.jp','kenzai-navi.com','itp.ne.jp','a6l.jp','baitoru.com','goo-net.com','homemate-research-drugstore.com','navitime.co.jp','mynavi.jp','twitter.com','twitter','tabelog.com','yahoo.co.jp','el.e-shops.jp','mtke-job.jp','paypay','biz.ne.jp','ats.joboplite.jp','mapion.co','.pdf','youtube','rakuten','epark.jp','en-gage.net','work-canvas.com','biz-maps','newscast.jp','kotobank.jp','wikipedia.org','1cs.jp','baseconnect.in','s-agent.jp','pcareer.m3.com','www.w3.org','salesnow.jp','en-hyouban.com','airjobtour.net','prtimes.jp','shizumatch.jp','jp.stanby.com','recruit','job.rikunabi.com','github.com','nstagram.com','job-gear.net','senken.co.jp','nikkei.com','arc-navi','doda.co.jp','indeed.com','koyou.pref.shizuoka.jp','sumo.jp','homes.co.jp','google.co','next.rikunabi','townwork.net','doraever.jp','sharefull.com','hatalike.jp','jobtalk.jp','nucoxd9y6','b-mall.ne','info.gbiz','grffer','careerindex','irbank','job.goo','job-net','houjin.jp','cnavi.g-search','e-aidem']
    for i in exhibitList:
        if url.find(i) > -1 :
            rt= ''
            break
    return rt

def prcSubmit(selectedForm):
    global DEBUGMODE    
    
    input_elements = selectedForm.find_elements(By.TAG_NAME, "input")
    button_elements = selectedForm.find_elements(By.TAG_NAME, "button")
    elements = input_elements + button_elements
    for element in elements:
        if  element.get_attribute('type')=='submit':
            if element.get_attribute('value').find('確')>-1 or  element.get_attribute('value').find('認')>-1:
                print(element.get_attribute('value'))
                element.click()
                time.sleep(3)
                debugWrite(  driver.find_elements(By.TAG_NAME, 'form')[0].get_attribute('outerHTML')   )
                driver.find_elements(By.TAG_NAME, 'form')[0].submit()
                break
                
            else:
                selectedForm.submit()
                break

def companyInfo(curl):
    if not isinstance(curl, str): return ''
    if curl.find('http') == -1 : return ''
    url=""
    driver.get(curl)
    flg=-1
    cnt=0
    for i in driver.find_elements(By.TAG_NAME,'a'):
        outer_html = i.get_attribute('innerHTML')
        if ('問い合わせ' in outer_html or '問合せ' in outer_html  or 'ご質問' in outer_html or 'ご用件' in outer_html or "コメント" in outer_html  or "問合わせ"  in outer_html or 'ご依頼内容' in outer_html or "メッセージ" in outer_html ) :
            #i.click()
            if i.get_attribute('href') :
                url=i.get_attribute('href')

    return url

start_time = time.time()
time_limit = 28800  # 8 hours in seconds
df = pd.read_csv(okFile)
cur=""
DEBUGMODE=True
for key, item in df.iterrows():
    sourceUrl=""
    if item['contact_url'] is not None and isinstance(item['contact_url'], str) and item['contact_url'].find('http') > -1:        
        sourceUrl = item['contact_url']
        companyName = item["companyname"].replace('&',' AND ')        
    else:
        companyName = item["companyname"].replace('&',' AND ')
        if  pd.notna(item['companyname']):
            try:
                sourceUrl=companyInfoGoogle( companyName )
            except:
                sourceUrl=""
    sourceUrl = exhibitURLCheck(sourceUrl)
    if sourceUrl=="":
        curl = exhibitURLCheck(item['URL1'])
        if curl == "":
            curl = exhibitURLCheck(item['URL2'])
        if curl !="":
            sourceUrl= companyInfo(curl)    
    logWrite( str(item["track_id"]) + " " + companyName + " " + sourceUrl+ " 送信開始")
    print( str(item["track_id"]) + " " + companyName + " " + sourceUrl+ " 送信開始")
    if sourceUrl!="" and sourceUrl.find("mailto:")== -1:
        try:
#        if 1==1:
            driver.get(sourceUrl)
            com.driver=driver
            getTemplate(str(int(item['inquiry_id'])))
            selectedForm = getAskForm()
            setControlDataByPlaceholder(selectedForm)
            setControlDataByLabel(selectedForm)
            setControlData(selectedForm)
            prcSubmit(selectedForm)
            time.sleep(1)
            try:
                driver.switch_to.alert.accept()
            except:
                print('no alert')
                pass            
            debugWrite('bundle exec rails update_contact_status:update  contact_tracking_id='+str(item["track_id"])+' update_mode=1')
            os.system('bundle exec rails update_contact_status:update  contact_tracking_id='+str(item["track_id"])+' update_mode=1')
            logWrite( sourceUrl+ " 送信成功")
        except:
            debugWrite('bundle exec rails update_contact_status:update  contact_tracking_id='+str(item["track_id"])+' update_mode=2')
            os.system('bundle exec rails update_contact_status:update  contact_tracking_id='+str(item["track_id"])+' update_mode=2')
            logWrite( sourceUrl+ " 送信失敗（001）")
    else:
        debugWrite('bundle exec rails update_contact_status:update  contact_tracking_id='+str(item["track_id"])+' update_mode=2')
        os.system('bundle exec rails update_contact_status:update  contact_tracking_id='+str(item["track_id"])+' update_mode=2')
        logWrite( sourceUrl+ " 送信失敗（002）")

